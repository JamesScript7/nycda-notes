REACT review

"App" component or sometimes called "Root"

render is to turn it into HTML

ES5:

var Greeting = React.createClass({ 
  
  render: function() {     
    return <h1>Hello, {this.props.name}</h1>;   
  }
});

ES6:

class App extends Component {
	render() {
		return (
			<div>

			</div>
		)
	}
}


<App /> is like: let appComponent = new App();
is like: let renderedHTML = appComponent.render();
is like: let root = document.getElementById('root');
is like: root.appendChild(renderedHTML);

name="world"
is
className="hello"

XML looks like HTML but it's generalized tags

optional: CSS modules

Becareful when using "this"
you can:

this.handleClick = this.handleClick.bind(this);

function thats called when you're creating the object

you can reuse the components and you can

you have to call super();
before you create constructors in a component.

any setup you wanna do in the component goes into the constructor

Daniel recommends not using the fat arrows!

use one or two "onClicks" per component

let game = {
	title: "Super Mario Bros.",
	console: "NES",
	year: 1985,
	info: function() {
		return `${this.title}, ${this.console}, ${this.year}.`
	}
}

game.info()

...

let g = f.bind(game);
g();


EXAMPLE:


<script>

	var o = {
		doSomething: function {
			console.log(this);
			alert("something");
		}
	}

</script>

<button onClick="o.doSomething()">Do Something</button>

to get a visual on wiring:

maxmsp
puredata.org











